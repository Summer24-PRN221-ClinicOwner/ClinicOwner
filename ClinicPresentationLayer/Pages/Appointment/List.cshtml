@page
@model ClinicPresentationLayer.Pages.Appointment.ListModel
@{

    var schedule = Model.Schedule;

    // Hardcoding the schedule data
    // schedule[0, 0] = "Mr. A\nNhổ răng khôn";
    // schedule[2, 2] = "Mr. B\nLàm trắng răng";
    // schedule[4, 1] = "Mr. C\nNhổ răng thường";
    // schedule[1, 3] = "Mr. D\nKhám tổng quát";

}

<body>
    <h1>Clinic Schedule</h1>
    <div>
        <a asp-page="./List" asp-route-PageWeek="@(Model.PageWeek - 1)" class="btn btn-primary">Previous</a>
        <a asp-page="./List" asp-route-PageWeek="@(Model.PageWeek + 1)" class="btn btn-primary">Next</a>
    </div>
    <h1>Schedule</h1>
   @*  <table class="table table-bordered"> *@
       <table>  
       <thead>
            <tr>
                <th></th>
                <th>Thứ 2</th>
                <th>Thứ 3</th>
                <th>Thứ 4</th>
                <th>Thứ 5</th>
                <th>Thứ 6</th>
                <th>Thứ 7</th>
                <th>Chủ Nhật</th>
            </tr>
        </thead>
        <tbody>
            @for (int slot = 0; slot < 10; slot++)
            {
                <tr>
                    <td>@("Slot " + (slot + 1) + " : " + GetSlotTime(slot))</td>
                    @for (int day = 0; day < 7; day++)
                    {
                        var cellContent = schedule[slot, day];
                        <td class="@(string.IsNullOrEmpty(cellContent) ? "" : "highlight")">@cellContent</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid black;
            text-align: center;
            padding: 8px;
            white-space: pre-line;
        }

        .highlight {
            background-color: yellow;
        }
    </style>
    @functions {
        public string GetSlotTime(int slotIndex)
        {
            switch (slotIndex)
            {
                case 0:
                    return "7h00 - 8h00";
                case 1:
                    return "8h00 - 9h00";
                case 2:
                    return "9h00 - 10h00";
                case 3:
                    return "10h00 - 11h00";
                case 4:
                    return "11h00 - 12h00";
                case 5:
                    return "13h00 - 14h00";
                case 6:
                    return "14h00 - 15h00";
                case 7:
                    return "15h00 - 16h00";
                case 8:
                    return "16h00 - 17h00";
                case 9:
                    return "17h00 - 18h00";
                default:
                    return "";
            }
        }
    }
</body>
