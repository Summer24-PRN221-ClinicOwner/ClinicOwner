// <auto-generated />
using System;
using ClinicRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicRepositories.Migrations
{
    [DbContext(typeof(Prn221Context))]
    partial class Prn221ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    b.Property<int?>("DentistId")
                        .HasColumnType("int")
                        .HasColumnName("DentistID");

                    b.Property<int?>("EndSlot")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("StartSlot")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Appointment");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DentistId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Clinic", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.ClinicOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id")
                        .HasName("PK_ClinicOwner");

                    b.ToTable("ClinicOwner", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Dentist", b =>
                {
                    b.Property<int>("DentistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DentistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DentistId"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("DentistId")
                        .HasName("PK_Dentist");

                    b.HasIndex("ClinicId");

                    b.HasIndex("LicenseId");

                    b.ToTable("Dentist", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.DentistAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailableSlots")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("Day")
                        .HasColumnType("datetime");

                    b.Property<int?>("DentistId")
                        .HasColumnType("int")
                        .HasColumnName("DentistID");

                    b.HasKey("Id")
                        .HasName("PK_DentistAvailability");

                    b.HasIndex("DentistId");

                    b.ToTable("DentistAvailability", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("License", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateSeen")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnType("datetime");

                    b.Property<int?>("DentistId")
                        .HasColumnType("int")
                        .HasColumnName("DentistID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("MessageId");

                    b.HasIndex("DentistId");

                    b.HasIndex("PatientId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id")
                        .HasName("PK_Patient");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Report");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Service");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Entities.Appointment", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Clinic");

                    b.HasOne("BusinessObjects.Entities.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistId")
                        .HasConstraintName("FK_Appointment_Dentist");

                    b.HasOne("BusinessObjects.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Appointment_Patient");

                    b.HasOne("BusinessObjects.Entities.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_Appointment_Service");

                    b.Navigation("Clinic");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Clinic", b =>
                {
                    b.HasOne("BusinessObjects.Entities.ClinicOwner", "Owner")
                        .WithMany("Clinics")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_ClinicOwner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Dentist", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Clinic", "Clinic")
                        .WithMany("Dentists")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Dentist_Clinic");

                    b.HasOne("BusinessObjects.Entities.License", "License")
                        .WithMany("Dentists")
                        .HasForeignKey("LicenseId")
                        .HasConstraintName("FK_Dentist_License");

                    b.Navigation("Clinic");

                    b.Navigation("License");
                });

            modelBuilder.Entity("BusinessObjects.Entities.DentistAvailability", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Dentist", "Dentist")
                        .WithMany("DentistAvailabilities")
                        .HasForeignKey("DentistId")
                        .HasConstraintName("FK_DentistAvailability_Dentist");

                    b.Navigation("Dentist");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Message", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Dentist", "Dentist")
                        .WithMany("Messages")
                        .HasForeignKey("DentistId")
                        .HasConstraintName("FK_Message_Dentist");

                    b.HasOne("BusinessObjects.Entities.Patient", "Patient")
                        .WithMany("Messages")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Message_Patient");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObjects.Entities.User", b =>
                {
                    b.HasOne("BusinessObjects.Entities.Dentist", "Dentist")
                        .WithOne("User")
                        .HasForeignKey("BusinessObjects.Entities.User", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Dentist");

                    b.HasOne("BusinessObjects.Entities.ClinicOwner", "ClinicOwner")
                        .WithOne("User")
                        .HasForeignKey("BusinessObjects.Entities.User", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_ClinicOwner");

                    b.HasOne("BusinessObjects.Entities.Patient", "Patient")
                        .WithOne("User")
                        .HasForeignKey("BusinessObjects.Entities.User", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Patient");

                    b.Navigation("ClinicOwner");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Dentists");
                });

            modelBuilder.Entity("BusinessObjects.Entities.ClinicOwner", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Dentist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DentistAvailabilities");

                    b.Navigation("Messages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Entities.License", b =>
                {
                    b.Navigation("Dentists");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Messages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Entities.Service", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
